/*! DataTables Bootstrap 4 integration Â©2011-2017 SpryMedia Ltd - datatables.net/license */
(function (factory) {
    if (typeof define === "function" && define.amd) {
        // AMD
        define(["jquery", "datatables.net"], (jQuery) => factory(jQuery, window, document));
    } else if (typeof exports === "object") {
        // CommonJS
        module.exports = (root, $) => {
            root = root || window;
            if (!$ || !$.fn.dataTable) $ = require("datatables.net")(root, $).$;
            return factory($, root, root.document);
        };
    } else {
        // Browser
        factory(jQuery, window, document);
    }
})(($, window, document) => {
    const DataTable = $.fn.dataTable;

    $.extend(true, DataTable.defaults, {
        dom: "<'row'<'col-sm-12 col-md-6'l><'col-sm-12 col-md-6'f>><'row'<'col-sm-12'tr>><'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>",
        renderer: "bootstrap"
    });

    $.extend(DataTable.ext.classes, {
        sWrapper: "dataTables_wrapper dt-bootstrap4",
        sFilterInput: "form-control form-control-sm",
        sLengthSelect: "custom-select custom-select-sm form-control form-control-sm",
        sProcessing: "dataTables_processing card",
        sPageButton: "paginate_button page-item"
    });

    DataTable.ext.renderer.pageButton.bootstrap = (settings, host, idx, buttons, page, pages) => {
        const api = new DataTable.Api(settings);
        const classes = settings.oClasses;
        const lang = settings.oLanguage.oPaginate;
        const aria = settings.oLanguage.oAria.paginate || {};
        let btnDisplay, btnClass;
        let counter = 0;

        const attach = (container, buttons) => {
            buttons.forEach(btn => {
                btnDisplay = '';
                btnClass = '';

                switch (btn) {
                    case 'ellipsis':
                        btnDisplay = '&#x2026;';
                        btnClass = 'disabled';
                        break;
                    case 'first':
                        btnDisplay = lang.sFirst;
                        btnClass = btn + (page > 0 ? '' : ' disabled');
                        break;
                    case 'previous':
                        btnDisplay = lang.sPrevious;
                        btnClass = btn + (page > 0 ? '' : ' disabled');
                        break;
                    case 'next':
                        btnDisplay = lang.sNext;
                        btnClass = btn + (page < pages - 1 ? '' : ' disabled');
                        break;
                    case 'last':
                        btnDisplay = lang.sLast;
                        btnClass = btn + (page < pages - 1 ? '' : ' disabled');
                        break;
                    default:
                        btnDisplay = btn + 1;
                        btnClass = page === btn ? 'active' : '';
                }

                if (btnDisplay) {
                    const node = $('<li>', {
                        "class": `${classes.sPageButton} ${btnClass}`,
                        id: idx === 0 && typeof btn === 'string' ? settings.sTableId + '_' + btn : null
                    })
                    .append($('<a>', {
                        href: "#",
                        "aria-controls": settings.sTableId,
                        "aria-label": aria[btn],
                        "data-dt-idx": counter,
                        tabindex: settings.iTabIndex,
                        "class": "page-link"
                    }).html(btnDisplay))
                    .appendTo(container);

                    settings.oApi._fnBindAction(node, { action: btn }, e => {
                        e.preventDefault();
                        if (!$(e.currentTarget).hasClass('disabled') && api.page() !== e.data.action) {
                            api.page(e.data.action).draw('page');
                        }
                    });

                    counter++;
                }
            });
        };

        let activeEl;
        try {
            activeEl = $(host).find(document.activeElement).data('dt-idx');
        } catch (e) { }

        $(host).empty().html('<ul class="pagination"/>').children('ul').each((_, ul) => {
            attach($(ul), buttons);
        });

        if (activeEl !== undefined) {
            $(host).find(`[data-dt-idx=${activeEl}]`).focus();
        }
    };

    return DataTable;
});
